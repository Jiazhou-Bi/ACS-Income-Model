User
Simulate a dataset based on the following information, giving the python code: 
IPUMS USA data 2022
STATEICP: State in which the housing unit is located https://usa.ipums.org/usa-action/variables/stateicp#codes_section
OWNERSHP: Whether the housing unit is rented or owned by its residents 0:N/A 1:Owned or purchased (borrowed) 2:Rented
MORTGAGE: Is the owner-occupied housing unit fully owned or is it encumbered by a mortgage, loan, or other type of debt 0:N/A 1:No, ownership is clear and free 2:Check mark on draft (may be) 3:Yes, mortgage/deed of trust or similar debt 4:Yes, under contract to purchase
GQ: Home, group home or vacant unit https://usa.ipums.org/usa-action/variables/gq#codes_section
SEX: Sex 1: male 2:female 9:missing/ðŸˆ³
AGE: Age as of last birthday https://usa.ipums.org/usa-action/variables/AGE#codes_section
MARST: Current Marital Status https://usa.ipums.org/usa-action/variables/marst#codes_section
EDUC: Educational attainment https://usa.ipums.org/usa-action/variables/EDUC#codes_section
 SCHLTYPE: attended public or private school https://usa.ipums.org/usa-action/variables/SCHLTYPE#codes_section
OCC2010: Occupational Code https://usa.ipums.org/usa-action/variables/occ2010#codes_section
VETSTAT: Information about the veteran 0:not applicable 1:not a veteran 2:veteran 9:missing
IND1990: Long-term industry https://usa.ipums.org/usa-action/variables/ind1990#codes_section
INCTOT: Gross personal income or loss before taxes https://usa.ipums.org/usa-action/variables/inctot#codes_section  

Generated by ChatGPT-4
Hereâ€™s Python code to simulate a dataset based on the provided IPUMS USA 2022 information. The code generates a random sample of rows for the described variables with distributions and categories approximating realistic values.

import pandas as pd
import numpy as np

# Set a random seed for reproducibility
np.random.seed(42)

# Number of records to simulate
n_records = 1000

# Simulate the dataset
data = pd.DataFrame({
    'STATEICP': np.random.choice(range(1, 57), size=n_records),  # Assuming 56 state codes including territories
    'OWNERSHP': np.random.choice([1, 2], size=n_records, p=[0.65, 0.35]),
    'MORTGAGE': np.random.choice([1, 2, 3, 4], size=n_records, p=[0.2, 0.3, 0.4, 0.1]),
    'GQ': np.random.choice([1, 2, 3, 5], size=n_records, p=[0.7, 0.1, 0.15, 0.05]),
    'SEX': np.random.choice([1, 2, 9], size=n_records, p=[0.48, 0.48, 0.04]),
    'AGE': np.random.randint(0, 100, size=n_records),
    'MARST': np.random.choice([1, 2, 3, 4, 5, 6], size=n_records, p=[0.25, 0.25, 0.2, 0.15, 0.1, 0.05]),
    'EDUC': np.random.choice(range(1, 12), size=n_records),  # Assuming education levels are 1-11
    'SCHLTYPE': np.random.choice([0, 1, 2], size=n_records, p=[0.2, 0.7, 0.1]),
    'OCC2010': np.random.choice(range(10, 1000), size=n_records),  # Occupational codes in range
    'VETSTAT': np.random.choice([0, 1, 2, 9], size=n_records, p=[0.7, 0.2, 0.05, 0.05]),
    'IND1990': np.random.choice(range(10, 1000), size=n_records),  # Industry codes in range
    'INCTOT': np.random.normal(50000, 20000, size=n_records)  # Simulated income distribution
})

# Ensuring no negative incomes
data['INCTOT'] = data['INCTOT'].clip(lower=0)

# Display the first few rows of the simulated dataset
print(data.head())

# Save to a CSV file
data.to_csv('simulated_ipums_data.csv', index=False)

Key Points:
	1	Random Choice Distributions: Where appropriate, probabilities (p parameter) have been used to simulate more realistic distributions.
	2	Age: Generated as a uniform random integer between 0 and 100.
	3	Income (INCTOT): Modeled as a normal distribution with mean $50,000 and standard deviation $20,000. Values are clipped to be non-negative.
	4	State Codes: Assuming a total of 56 codes for all U.S. states and territories.
Output:
The script generates a CSV file named simulated_ipums_data.csv. You can adjust the parameters (e.g., n_records, probabilities, etc.) based on your specific project requirements.
User
Write the test simulation data code

Generated by ChatGPT-4
Here is a Python test code for testing the simulated IPUMS USA dataset. It checks the structure, valid ranges, and logical consistency of the data.
import pandas as pd
import numpy as np

# Load the simulated dataset
file_path = 'data/simulated_data/simulated_ipums_data.csv'
data = pd.read_csv(file_path)

# Define test functions
def test_column_presence():
    """Check if all required columns are present."""
    required_columns = ['STATEICP', 'OWNERSHP', 'MORTGAGE', 'GQ', 'SEX', 'AGE', 
                        'MARST', 'EDUC', 'SCHLTYPE', 'OCC2010', 'VETSTAT', 
                        'IND1990', 'INCTOT']
    assert all(column in data.columns for column in required_columns), "Missing columns in the dataset."

def test_valid_ranges():
    """Check if numerical columns fall within valid ranges."""
    assert data['STATEICP'].between(1, 56).all(), "Invalid state codes."
    assert data['OWNERSHP'].isin([1, 2]).all(), "Invalid ownership values."
    assert data['MORTGAGE'].isin([1, 2, 3, 4]).all(), "Invalid mortgage values."
    assert data['GQ'].isin([1, 2, 3, 5]).all(), "Invalid group quarters values."
    assert data['SEX'].isin([1, 2, 9]).all(), "Invalid sex values."
    assert data['AGE'].between(0, 100).all(), "Invalid age values."
    assert data['MARST'].isin([1, 2, 3, 4, 5, 6]).all(), "Invalid marital status values."
    assert data['SCHLTYPE'].isin([0, 1, 2]).all(), "Invalid school type values."
    assert data['INCTOT'].ge(0).all(), "Income cannot be negative."

def test_logical_consistency():
    """Check for logical consistency between columns."""
    # If OWNERSHP is 2 (rented), then MORTGAGE should be 0 (not applicable)
    rented_units = data[data['OWNERSHP'] == 2]
    assert (rented_units['MORTGAGE'] == 0).all(), "Inconsistent mortgage data for rented units."

def test_missing_values():
    """Check for missing values in key columns."""
    key_columns = ['STATEICP', 'SEX', 'AGE', 'INCTOT']
    assert data[key_columns].notnull().all().all(), "Missing values in key columns."

# Run tests
if __name__ == "__main__":
    test_column_presence()
    test_valid_ranges()
    test_logical_consistency()
    test_missing_values()
    print("All tests passed!")

Explanation of Tests
	1	Column Presence: Verifies that all required columns exist in the dataset.
	2	Valid Ranges: Ensures that all numerical fields have values within their specified ranges.
	3	Logical Consistency: Checks relationships between columns (e.g., rented units should not have mortgage data).
	4	Missing Values: Confirms there are no missing values in essential columns.
Usage
	1	Place the simulated dataset at data/simulated_data/simulated_ipums_data.csv.
	2	Run the script to validate the data structure and contents.
	3	If any test fails, it will raise an assertion error with a detailed message.

